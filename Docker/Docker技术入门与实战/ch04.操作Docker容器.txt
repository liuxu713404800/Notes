容器是Docker的另一个核心概念，容器是镜像的一个运行的实例。镜像是静态的只读文件，而容器带有运行时需要的可写文件层；同时，容器中的应用进程处于运行状态。
如果认为虚拟机是模拟运行的一整套操作系统（包括内核、应用运行态环境和其他系统环境）和跑在上面的应用。那么Docker容器就是独立运行的一个（或一组）应用，以及它们必需的运行环境。

1.新建一个容器
$ docker create -it ubuntu:18.04
5beddaa6d8976512eb3d7fd3efe68223cf04a435fa739ead0c14502e6b3a7b4a
$docker ps -a
CONTAINER ID        IMAGE                            COMMAND                  CREATED             STATUS                         PORTS                                NAMES
5beddaa6d897        ubuntu:18.04                     "/bin/bash"              15 seconds ago      Created                                                             wonderful_robinson
1f37ee503732        centos7-x86_64-minimal:lastest   "/bin/bash"              45 minutes ago      Exited (0) 44 minutes ago                                           wonderful_sanderson

使用docker create命令新建的容器处于停止状态可以使用docker start命令来启动它
$ docker  start 5beddaa6d897
5beddaa6d897

也可以直接使用docker run命令来创建并启动容器

更多的时候，我们需要让docker容器在后台以守护形式运行，需要通过添加-d参数来实现
$ docker run -d centos7-x86_64-minimal:lastest /bin/bash -c "echo 123"
72e075b364a65388bb2eda811ae29d8cd04983e9084a6ad1f7e21a8b2876e8b8

查看容器输出需要docker logs命令


2.停止容器
暂停容器可以使用docker pause
$ docker run --name test -d -it ubuntu:18.04 bash
def3cfa8a671ae2e467bb28a99983323c83bc836e5521b491bb76c0a509d83b1
$ docker pause test
test
$ docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                   PORTS               NAMES
def3cfa8a671        ubuntu:18.04        "bash"              17 seconds ago      Up 15 seconds (Paused)                       test

终止容器：docker stop
$ docker stop test
test
$ docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES

终止后的容器，可以通过docker start来重新启动



3.进入容器
在使用-d参数时，容器启动后会进入后台，用户无法看到容器中的信息，也无法进行操作。

使用docker attach命令可以进入容器
$ docker start def3cfa8a671
def3cfa8a671
$ docker attach def3cfa8a671
root@def3cfa8a671:/#
然而使用attach命令有时候并不方便。当多个窗口同时attach到同一个容器的时候，所有窗口都会同步显示；当某个窗口因命令阻塞时，其他窗口也无法执行操作了。

使用docker exec命令
$ docker start def3cfa8a671
def3cfa8a671
$ docker exec -it def3cfa8a671 /bin/bash
root@def3cfa8a671:/#
这种方式可以在不影响容器内其他应用的前提下，用户可以与容器进行交互。


4.删除容器
默认情况下，docker rm 命令只能删除已经处于终止或退出状态的容器，并不能删除还处于运行状态的容器。
如果要直接删除一个运行中的容器，可以添加-f参数。Docker会先发送SIGKILL信号给容器，终止其中的应用，之后强行删除。
$ docker ps -a
CONTAINER ID        IMAGE                            COMMAND                  CREATED             STATUS                      PORTS               NAMES
1f37ee503732        centos7-x86_64-minimal:lastest   "/bin/bash"              2 days ago          Exited (0) 2 days ago                           wonderful_sanderson
db826a94e309        ubuntu:18.04                     "/bin/bash"              2 days ago          Exited (0) 2 days ago                           affectionate_williams
$ docker rm 1f37ee503732 db826a94e309
1f37ee503732
db826a94e309

5.导入导出容器
分别用import和export进行容器的导入与导出
导出
$ docker ps -a
CONTAINER ID        IMAGE                   COMMAND                  CREATED             STATUS                      PORTS               NAMES
c4dfdbf1e496        ubuntu:18.04            "/bin/bash"              4 seconds ago       Created                                         serene_varahamihira
$ docker export -o  ububtu:18.04.tar  c4dfdbf1e496
$ ls
ububtu:18.04.tar

导入
$ docker import ububtu:18.04.tar -m "test"
sha256:cb594bafb50d555316312eb1be1692351ceb0366e1c28bddd0c3d7db64ae5a8c
$ docker images
REPOSITORY               TAG                 IMAGE ID            CREATED              SIZE
<none>                   <none>              cb594bafb50d        21 seconds ago       81.5MB
centos7-x86_64-minimal   lastest             98b5455a0ba2        2 days ago           435MB


6.查看容器
查看容器详情 inspect
docker ps -a
CONTAINER ID        IMAGE                   COMMAND                  CREATED             STATUS                      PORTS               NAMES
c4dfdbf1e496        ubuntu:18.04            "/bin/bash"              16 minutes ago      Created                                         serene_varahamihira
$ docker container inspect  c4dfdbf1e496
[
    {
        "Id": "c4dfdbf1e49674ebecf5f12036cd17d97e8a87b5adbaa79d11abc469a3cd9ad1",
        "Created": "2019-05-09T01:45:14.53501435Z",
        "Path": "/bin/bash",
        "Args": [],
		...
	},
	...
}

查看容器内进程 top
$ docker start c4dfdbf1e496
c4dfdbf1e496
$ docker top c4dfdbf1e496
PID                 USER                TIME                COMMAND
2375                root                0:00                /bin/bash
如果容器未运行，那么top命令会返回error
$ docker stop c4dfdbf1e496
c4dfdbf1e496
$ docker top c4dfdbf1e496
Error response from daemon: Container c4dfdbf1e49674ebecf5f12036cd17d97e8a87b5adbaa79d11abc469a3cd9ad1 is not running

查看统计信息 stats
$ docker stats c4dfdbf1e496
CONTAINER ID        NAME                  CPU %               MEM USAGE / LIMIT   MEM %               NET I/O             BLOCK I/O           PIDS
c4dfdbf1e496        serene_varahamihira   0.00%               708KiB / 1.952GiB   0.03%               828B / 0B           0B / 0B             1



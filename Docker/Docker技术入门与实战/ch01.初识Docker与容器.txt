1.Docker是基于Go语言实现的开源容器项目
Docker的构想是要实现“Build, Ship and Run Any App, Anywhere”，即通过对应用的封装（Packaging）、分发（Distribution）、部署（Deployment）、运行（ Runtime ）生命周期进行管
理，达到应用组件级别的“一次封装，到处运行”。 这里的应用组件，既可以是一个Web应用、一个编译环境，也可以是一套数据库平台服务，甚至是一个操作系统或集群。

2.Docker中最重要的就是Linux 容器（Linux Containers, LXC）技术
容器有效地将由单个操作系统管理的资源划分到孤立的组中，以更好地在孤立的组之间平衡有冲突的资源使用需求。 
与虚拟化相比，这样既不需要指令级模拟，也不需要即时编译。容器可以在核心CPU本地运行指令而不需要任何专门的解释机制。此外，也避免了准虚拟化（para-virtualization）和系统调用替换中的复杂性。

3.Docker比Linux容器的优势
在LXC的基础上，Docker进一步优化了容器的使用体验。
首先，Docker提供了各种容器管理工具（如分发、版本、移植等），让用户无须关注底层的操作，更加简单明了地管理和使用容器；
其次，Docker通过引人分层文件系统构建和高效的镜像机制，降低了迁移难度，极大地改善了用户体验。用户操作Docker容器就像操作应用自身一样简单。

4.为什么使用docker
从根本上来说，docker使应用脱离了对底层操作的直接依赖，通过容器来打包应用，解藕应用和运行平台。迁移的时候，只需要在新的服务器上启动需要的容器就可以了，无论新旧服务器是否是同一类型的平台。这将帮助我们节约大量的宝贵时间，并降低部署过程出现问题的风险。

5.Docker在开发和运维中的优势
1）更快速的交付和部署；
2）更高效的资源利用：与传统虚拟机方式相比，Docker的性能要提高1～2个数量级；
3）更轻松的迁移和扩展；
4）更简单的更新管理：使用Dockerfile，只需要小小的配置修改，就可以替代以往大量的更新工作。

6.Docker与虚拟机的比较
1）Docker容器很快，启动和停止可以在秒级实现；
2）Docker容器对系统资源需求很少；
3）Docker通过类似Git设计理念的操作来方便用户获取、分发和更新应用镜像，存储复用，增量更新；
4）Docker通过Dockerfile支持灵活的自动化创建和部署机制，以提高工作效率，并标准化流程；

7.虚拟化
虚拟化的核心是对资源的抽象，目标往往是为了在同一个主机上同时运行多个系统或应用，从而提高系统资源的利用率，并且带来降低成本、方便管理和容错容灾等好处。
大类来分，虚拟化技术可分为基于硬件的虚拟化和基于软件的虚拟化。
基于硬件的虚拟化技术不多见，也不做讨论；
基于软件的虚拟化可以分为不同层次：
1）完全虚拟化：虚拟机模拟完整的底层硬件环境和特权指令的执行过程，客户操作系统无须进行修改。如VMware Workstation，VirtualBox；
2）硬件辅助虚拟化：利用硬件（主要是CPU）辅助支持处理敏感指令来实现完全虚拟化的功能，客户操作系统无须修改。例如VMware Workstation；
3）部分虚拟化：只针对部分硬件资源进行虚拟化，客户操作系统需要进行修改；
4）超虚拟化：部分硬件接口以软件的形式提供给客户机操作系统，客户操作系统需要进行修改；
5）操作系统级虚拟化：内核通过创建多个虚拟的操作系统实例（内核和库）来隔离不同的进程。容器相关技术（包括Docker）即在这个范畴。

8.简单对比一下传统虚拟机和Docker程序运行时的区别
-----------------------------------------------------------------------
				统虚拟机				|				Docker
-----------------------------------------------------------------------
				应用程序				|				应用程序
-----------------------------------------------------------------------
			   运行时环境				|			   运行时环境
-----------------------------------------------------------------------
			 虚拟机操作系统			|
-------------------------------------			  Docker容器支持
			 虚拟机管理程序			|
-----------------------------------------------------------------------
			 宿主机操作系统			|			  宿主机操作系统
-----------------------------------------------------------------------
			 	 硬件				|				  硬件
-----------------------------------------------------------------------
传统方式是在硬件层面实现虚拟化，需要有额外的虚拟机管理应用和虚拟机操作系统层，所以效率较低。
docker实质上是一种软件，在操作系统层面上实现虚拟化，直接复用本地主机的操作系统，所以更轻量。
				
ACID：
	原子性(atomiity)：
		原子性是指整个数据库事务是不可分割的工作单位，也可以认为是最小的单位；
		例如取款过程，要么都做了，要么都不做。
	一致性(consistency)：
		一致性指事务发生后，数据库状态发生了变化，但是数据库完整性约束没有被破坏；
		例如，姓名字段为唯一性约束，修改名称的事务完成后，不能使得姓名唯一性被破坏；
		或者是说五个账户中总共有500元，那么不管事务如何操作5个账户，总共加起来必须有500元；
	隔离性(isolation)：
		隔离性要求每个事务的对象对其他事务的操作最想是能互相分离的；事务的隔离性将确保每一事务在系统中认为只有该事务在使用系统；
	持久性(durability):
		事务一旦提交，结果就是永久性的；即使发生宕机故障，数据库也能恢复；

	注意，ACID只是标准，但是各个数据库厂商实现使用不同的。例如ORACLE的默认事务级别为READ COMMIT，所以其实还会发生不可重复读和幻读的问题；

事务分类：
	扁平事务：
		最常见的事务类型，例如一个串行化的指令，最后提交；
	带有保存点的扁平事务：
		可以认为是分段事务，每次commit或者rollback只执行其中的某一段；
	链事务：
		一个work完成后才能进行下一个work，全部完成commit或者中间有异常rollback；
	嵌套事务：
		顶层事务调用一层层的子事务；
	分布式事务：
		例如网络中的转账，如果任何一个数据库出现问题，所有事务的数据库都要回滚；

事务的实现：
	redo：记录了事务操作变化过程；
	undo：记录了之前的状态；
	严格来说，上述描述不准确，可以这么简单理解；实际上，其中还包含了purge和group commit的消息，并且每一步操作中都设及写磁盘算法；

应该避免的事务习惯：
	循环中提交：会产生数据准确性（不知道出错时停留在哪里）和性能问题；
	自动提交：DBA级别的操作，程序员注意就好；
	自动回滚
聚集索引：
	InnoDB是索引组织表，表中的数据是按照主键的顺序进行存放的；
	对于主键查找的数据，因为数据在磁盘上的位置是连续的，所以读取要比随机读快的多；

非聚集索引（辅助索引）：
	非聚集索引的顺序并不是真正的物理存储顺序，所以是无法保证连续读的；
	非聚集索引的叶子节点存储的是聚集索引键；

cardinality值：
	B+树索引适用的场景为索引具有高选择性（低重复性）；cardinality是描述字段中数值分类的数据，是一个预估值，并不一定严格准确。
	例如某个班级有100个学生，男女各半，那么学号列的cardinality为100，性别列的cardinality为2；
	实际适用过程中，cardinality/n_rows_in_table越接近于1，建立B+树索引的结果越好；

联合索引：
	叶子节点存储的不是一个单一值，而是多个键值；
	联合索引天然就对索引的键值进行了排序，比如建立（订单号，时间）的联合索引，有助于满足多个主键排序需求；
	但是对于联合中的单键值，无法做到自然排序。例如（a，b）的联合索引，单独查询a或者单独查询b是无效的。

覆盖索引：
	提取出需求字段，建立一个字段比较宽的索引，适用于不需要全部取出行记录的情况；

hash索引需要了解一下hash算法，InnoDB采冲了链表式的冲突解决方式

全文索引了解就好，可以采用Sphinx、Elasticsearch等更加成熟的辅助方式
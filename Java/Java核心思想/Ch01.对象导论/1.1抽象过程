1.1 抽象过程
Java语言特性表现出一种纯粹的面向对象测程序设计方式：
1）万物皆对象。对象可视为一种奇特的变量，可以存储数据，也可以对自身进行操作；
2）程序是对象的集合，他们通过发送消息来告诉彼此所要做的；
3）每个对象都有自己的由其他对象所构成的存储。可以通过创建包含现有对象的包的方式来创建新类型的对象；
4）每个对象都有类型；
5）某一特定对象的所有对象都可以接收同样的消息；



1.2 每个对象都有一个接口
1）第一个面向对象的语言为Simula-67；
2）每个对象都只能满足某些请求，这些请求由对象的接口所定义。接口确定了对某一特定对象所能发出的请求。


1.3 每个对象都提供服务
整单视图开发或者理解一个程序设计时，最好的方法就是将对象视为“服务提供者”。程序本身将想用户提供服务，它将调用其他对象提供的服务来实现这一目的。我们的目标就是能够创造能够提供理想的服务来解决问题的一系列对象。
将对象看作服务的提供者还有一个附带的好处：提高对象的内聚性。高内聚是软件设计的基本质量要求之一

1.4 被隐藏的具体实现
将程序开发人员按照角色分为类创建者和客户端程序员（即类定义者和类使用者），将类的具体实现隐藏起来，可以起到保护类的作用。

1.5 复用的具体实现
在创建新类时，应该首先考虑组合，采用这种方式，设计会变得更加清晰；

1.6 继承
基类与导出类（继承类）产生差异的方法有两种：
1）添加新方法；2）覆盖基类方法

继承只覆盖基类中的方法而不添加新的方案，可以被视为纯粹替代，通常称之为替代原则。某种意义上来说，这是处理继承的理想方式，基类与导出类之间的关系称为is-a（是一个）关系。
有时候必须在导出类中添加新的接口元素，这样也就扩展了接口。这种情况我们可以描述为is-like-a(像是一个)关系

1.7 伴随多待的可互换对象
在处理类型的层次结构时，经常想把一个对象不当做他所属的特定类型来对待，而是将其当做其基类的对象来对待。这使得人们可以编写出不依赖于特定类型的代码。
前期绑定:编译器产生一个具体的函数的名字的调用，运行时将这个调用解析到将要被执行的代码的绝对地址；
后期绑定:程序直到运行时才能确定代码的地址；
Boy extends Person; Person person1 = new Boy();
Girl extends Person; Person person2 = new Girl();
Java当中的方法只有final，static，private和构造方法是前期绑定。Java使用一小段特殊的代码来替代绝对地址的调用，这段代码根据对象中存储的信息来计算方法的地址。



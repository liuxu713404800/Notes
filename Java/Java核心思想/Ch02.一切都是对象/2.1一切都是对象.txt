2.1 用引用操作对象
String s; 只是创建了一个引用，并不是对象。因为此时s并没有关联任何事物。

2.2 所有对象都必须创建
String s = new String("str"); 不仅在内存中新创建了一个字符串对象，而且提供了操作字符串的引用s
数据存放区域：
1）寄存器
最快的区域，位于处理器内部。Java中不能直接感知和控制寄存器，但是C和C++允许像编译器建议寄存器的分配方式；
2）堆栈
位于通用RAM中，通过堆栈指针移动进行访问。指针向上移动，释放掉一些内存；指针向下移动，分配新的内存；
创建程序时，Java系统必须知道存储在堆栈内的所有确切的生命周期，以便上线移动堆栈指针；
3）堆
位于RAM区，用于存放所有的java对象。
堆不同于栈的好处是，编译器不需要知道存储数据在堆里存活多长时间，新产生对象时，java会在堆内存中自动分配，灵活性提高了很多。
相应的，分配和清理时堆要比栈花费更多的时间
4）常量存储
常量值直接放在程序代码内部，因为它们永远不会被改变。
5）非RAM存储
数据存活于程序之外。需要的时候读取，恢复成常规基于RAM的对象。如流对象和持久化对象。

对于基本数据类型，Java不是讲对象存储在堆中，而是将这个变量直接置于栈中，因此更加高效。

java在使用任何引用前，必须为其指定一个对象，如果师徒使用一个还是null的引用，在运行时将会报错。

2.3 永远不要销毁对象
在引用消失之后，引用所指向的对象边无法访问了。java的垃圾回收器会监视new所创建的所有对象，并辨别那些不会再被引用的对象，随后释放这些对象的内存空间。

2.4 创建新的数据类型：类
若类的某个成员是基本数据类型，几十没有进行初始化，Java也会确保它获得一个默认值，具体规则如下
boolean     false
char        '\u0000'(null)
byte        (byte)0 
short       (short)0
int         0
long        0L
float       0.0f
double      0.0d

2.5 方法、参数和返回值
方法名和参数列表(合起来被称为"方法签名")唯一地标识出某个方法
方法只能作为类的一步来创建，方法也只能通过对象或类(静态方法)才能被调用

2.6 构建一个Java程序
static关键字，应用在两种情况下:
1)只想为某特定域分配单独的存储空间，而不去考虑究竟需要创建多少对象；
2)某个方法不与包含他的类的任何对象关联在一起，即使没有创建对象，也能使用这个方法；

2.7 运行你的第一个java程序
java程序运行分为编译和运行两部分，javac命令负责编译，java负责运行

2.8 - 2.11 注释文档之类的的不再赘述
